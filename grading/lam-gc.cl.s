	.data
	.align	2
	.globl	class_nameTab
	.globl	Main_protObj
	.globl	Int_protObj
	.globl	String_protObj
	.globl	bool_const0
	.globl	bool_const1
	.globl	_int_tag
	.globl	_bool_tag
	.globl	_string_tag
_int_tag:
	.word	2
_bool_tag:
	.word	3
_string_tag:
	.word	4
	.globl	_MemMgr_INITIALIZER
_MemMgr_INITIALIZER:
	.word	_GenGC_Init
	.globl	_MemMgr_COLLECTOR
_MemMgr_COLLECTOR:
	.word	_GenGC_Collect
	.globl	_MemMgr_TEST
_MemMgr_TEST:
	.word	0
	.word	-1
str_const75:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const1
	.byte	0	
	.align	2
	.word	-1
str_const74:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const2
	.ascii	"Main"
	.byte	0	
	.align	2
	.word	-1
str_const73:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const2
	.ascii	"Term"
	.byte	0	
	.align	2
	.word	-1
str_const72:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const3
	.ascii	"App"
	.byte	0	
	.align	2
	.word	-1
str_const71:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const4
	.ascii	"Lambda"
	.byte	0	
	.align	2
	.word	-1
str_const70:
	.word	4
	.word	7
	.word	String_dispTab
	.word	int_const5
	.ascii	"Variable"
	.byte	0	
	.align	2
	.word	-1
str_const69:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const2
	.ascii	"Expr"
	.byte	0	
	.align	2
	.word	-1
str_const68:
	.word	4
	.word	8
	.word	String_dispTab
	.word	int_const6
	.ascii	"LambdaListRef"
	.byte	0	
	.align	2
	.word	-1
str_const67:
	.word	4
	.word	8
	.word	String_dispTab
	.word	int_const7
	.ascii	"LambdaListNE"
	.byte	0	
	.align	2
	.word	-1
str_const66:
	.word	4
	.word	7
	.word	String_dispTab
	.word	int_const8
	.ascii	"LambdaList"
	.byte	0	
	.align	2
	.word	-1
str_const65:
	.word	4
	.word	7
	.word	String_dispTab
	.word	int_const9
	.ascii	"VarListNE"
	.byte	0	
	.align	2
	.word	-1
str_const64:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const10
	.ascii	"VarList"
	.byte	0	
	.align	2
	.word	-1
str_const63:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const4
	.ascii	"String"
	.byte	0	
	.align	2
	.word	-1
str_const62:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const2
	.ascii	"Bool"
	.byte	0	
	.align	2
	.word	-1
str_const61:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const3
	.ascii	"Int"
	.byte	0	
	.align	2
	.word	-1
str_const60:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const11
	.ascii	"IO"
	.byte	0	
	.align	2
	.word	-1
str_const59:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const4
	.ascii	"Object"
	.byte	0	
	.align	2
	.word	-1
str_const58:
	.word	4
	.word	7
	.word	String_dispTab
	.word	int_const8
	.ascii	"_prim_slot"
	.byte	0	
	.align	2
	.word	-1
str_const57:
	.word	4
	.word	7
	.word	String_dispTab
	.word	int_const9
	.ascii	"SELF_TYPE"
	.byte	0	
	.align	2
	.word	-1
str_const56:
	.word	4
	.word	7
	.word	String_dispTab
	.word	int_const9
	.ascii	"_no_class"
	.byte	0	
	.align	2
	.word	-1
str_const55:
	.word	4
	.word	8
	.word	String_dispTab
	.word	int_const6
	.ascii	"<basic class>"
	.byte	0	
	.align	2
	.word	-1
str_const54:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const10
	.ascii	"\n};\n};\n"
	.byte	0	
	.align	2
	.word	-1
str_const53:
	.word	4
	.word	11
	.word	String_dispTab
	.word	int_const12
	.ascii	"  main() : EvalObject {\n"
	.byte	0	
	.align	2
	.word	-1
str_const52:
	.word	4
	.word	8
	.word	String_dispTab
	.word	int_const6
	.ascii	"class Main {\n"
	.byte	0	
	.align	2
	.word	-1
str_const51:
	.word	4
	.word	17
	.word	String_dispTab
	.word	int_const13
	.ascii	"(*Generated by lam.cl (Jeff Foster, March 2000)*)\n"
	.byte	0	
	.align	2
	.word	-1
str_const50:
	.word	4
	.word	16
	.word	String_dispTab
	.word	int_const14
	.ascii	"\n------------------cut here------------------\n"
	.byte	0	
	.align	2
	.word	-1
str_const49:
	.word	4
	.word	10
	.word	String_dispTab
	.word	int_const15
	.ascii	"Generating code for "
	.byte	0	
	.align	2
	.word	-1
str_const48:
	.word	4
	.word	20
	.word	String_dispTab
	.word	int_const16
	.ascii	"  apply(y : EvalObject) : EvalObject { { abort(); self; } };\n"
	.byte	0	
	.align	2
	.word	-1
str_const47:
	.word	4
	.word	19
	.word	String_dispTab
	.word	int_const17
	.ascii	"  init(p : Closure) : Closure {{ parent <- p; self; }};\n"
	.byte	0	
	.align	2
	.word	-1
str_const46:
	.word	4
	.word	12
	.word	String_dispTab
	.word	int_const18
	.ascii	"  get_x() : EvalObject { x };\n"
	.byte	0	
	.align	2
	.word	-1
str_const45:
	.word	4
	.word	14
	.word	String_dispTab
	.word	int_const19
	.ascii	"  get_parent() : Closure { parent };\n"
	.byte	0	
	.align	2
	.word	-1
str_const44:
	.word	4
	.word	9
	.word	String_dispTab
	.word	int_const20
	.ascii	"  x : EvalObject;\n"
	.byte	0	
	.align	2
	.word	-1
str_const43:
	.word	4
	.word	10
	.word	String_dispTab
	.word	int_const15
	.ascii	"  parent : Closure;\n"
	.byte	0	
	.align	2
	.word	-1
str_const42:
	.word	4
	.word	14
	.word	String_dispTab
	.word	int_const21
	.ascii	"class Closure inherits EvalObject {\n"
	.byte	0	
	.align	2
	.word	-1
str_const41:
	.word	4
	.word	16
	.word	String_dispTab
	.word	int_const14
	.ascii	"  eval() : EvalObject { { abort(); self; } };\n"
	.byte	0	
	.align	2
	.word	-1
str_const40:
	.word	4
	.word	12
	.word	String_dispTab
	.word	int_const22
	.ascii	"class EvalObject inherits IO {\n"
	.byte	0	
	.align	2
	.word	-1
str_const39:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const2
	.ascii	" =>\n"
	.byte	0	
	.align	2
	.word	-1
str_const38:
	.word	4
	.word	8
	.word	String_dispTab
	.word	int_const6
	.ascii	"beta-reduce: "
	.byte	0	
	.align	2
	.word	-1
str_const37:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const0
	.ascii	"z"
	.byte	0	
	.align	2
	.word	-1
str_const36:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const0
	.ascii	"y"
	.byte	0	
	.align	2
	.word	-1
str_const35:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const0
	.ascii	"x"
	.byte	0	
	.align	2
	.word	-1
str_const34:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const10
	.ascii	"  esac)"
	.byte	0	
	.align	2
	.word	-1
str_const33:
	.word	4
	.word	17
	.word	String_dispTab
	.word	int_const23
	.ascii	"    o : Object => { abort(); new EvalObject; };\n"
	.byte	0	
	.align	2
	.word	-1
str_const32:
	.word	4
	.word	12
	.word	String_dispTab
	.word	int_const22
	.ascii	"    c : Closure => c.apply(y);\n"
	.byte	0	
	.align	2
	.word	-1
str_const31:
	.word	4
	.word	8
	.word	String_dispTab
	.word	int_const7
	.ascii	"  case x of\n"
	.byte	0	
	.align	2
	.word	-1
str_const30:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const2
	.ascii	" in\n"
	.byte	0	
	.align	2
	.word	-1
str_const29:
	.word	4
	.word	10
	.word	String_dispTab
	.word	int_const24
	.ascii	"     y : EvalObject <- "
	.byte	0	
	.align	2
	.word	-1
str_const28:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const11
	.ascii	",\n"
	.byte	0	
	.align	2
	.word	-1
str_const27:
	.word	4
	.word	10
	.word	String_dispTab
	.word	int_const24
	.ascii	"(let x : EvalObject <- "
	.byte	0	
	.align	2
	.word	-1
str_const26:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const11
	.ascii	"))"
	.byte	0	
	.align	2
	.word	-1
str_const25:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const3
	.ascii	")@("
	.byte	0	
	.align	2
	.word	-1
str_const24:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const11
	.ascii	"(("
	.byte	0	
	.align	2
	.word	-1
str_const23:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const3
	.ascii	"};\n"
	.byte	0	
	.align	2
	.word	-1
str_const22:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const25
	.ascii	";}};\n"
	.byte	0	
	.align	2
	.word	-1
str_const21:
	.word	4
	.word	8
	.word	String_dispTab
	.word	int_const26
	.ascii	"      x <- y;\n"
	.byte	0	
	.align	2
	.word	-1
str_const20:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const4
	.byte	92
	.ascii	"n\");\n"
	.byte	0	
	.align	2
	.word	-1
str_const19:
	.word	4
	.word	13
	.word	String_dispTab
	.word	int_const27
	.ascii	"    { out_string(\"Applying closure "
	.byte	0	
	.align	2
	.word	-1
str_const18:
	.word	4
	.word	14
	.word	String_dispTab
	.word	int_const28
	.ascii	"  apply(y : EvalObject) : EvalObject {\n"
	.byte	0	
	.align	2
	.word	-1
str_const17:
	.word	4
	.word	10
	.word	String_dispTab
	.word	int_const15
	.ascii	" inherits Closure {\n"
	.byte	0	
	.align	2
	.word	-1
str_const16:
	.word	4
	.word	8
	.word	String_dispTab
	.word	int_const6
	.ascii	"class Closure"
	.byte	0	
	.align	2
	.word	-1
str_const15:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const4
	.ascii	"self))"
	.byte	0	
	.align	2
	.word	-1
str_const14:
	.word	4
	.word	8
	.word	String_dispTab
	.word	int_const6
	.ascii	"new Closure))"
	.byte	0	
	.align	2
	.word	-1
str_const13:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const10
	.ascii	").init("
	.byte	0	
	.align	2
	.word	-1
str_const12:
	.word	4
	.word	8
	.word	String_dispTab
	.word	int_const6
	.ascii	"((new Closure"
	.byte	0	
	.align	2
	.word	-1
str_const11:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const0
	.ascii	"."
	.byte	0	
	.align	2
	.word	-1
str_const10:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const0
	.byte	92
	.byte	0	
	.align	2
	.word	-1
str_const9:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const10
	.ascii	"get_x()"
	.byte	0	
	.align	2
	.word	-1
str_const8:
	.word	4
	.word	11
	.word	String_dispTab
	.word	int_const29
	.ascii	"Error:  free occurrence of "
	.byte	0	
	.align	2
	.word	-1
str_const7:
	.word	4
	.word	8
	.word	String_dispTab
	.word	int_const6
	.ascii	"get_parent()."
	.byte	0	
	.align	2
	.word	-1
str_const6:
	.word	4
	.word	16
	.word	String_dispTab
	.word	int_const30
	.ascii	"\nError: Expr is pure virtual; can't gen_code\n"
	.byte	0	
	.align	2
	.word	-1
str_const5:
	.word	4
	.word	16
	.word	String_dispTab
	.word	int_const31
	.ascii	"\nError: Expr is pure virtual; can't substitute\n"
	.byte	0	
	.align	2
	.word	-1
str_const4:
	.word	4
	.word	17
	.word	String_dispTab
	.word	int_const23
	.ascii	"\nError: Expr is pure virtual; can't beta-reduce\n"
	.byte	0	
	.align	2
	.word	-1
str_const3:
	.word	4
	.word	16
	.word	String_dispTab
	.word	int_const31
	.ascii	"\nError: Expr is pure virtual; can't print self\n"
	.byte	0	
	.align	2
	.word	-1
str_const2:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const0
	.ascii	" "
	.byte	0	
	.align	2
	.word	-1
str_const1:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const0
	.ascii	"\n"
	.byte	0	
	.align	2
	.word	-1
str_const0:
	.word	4
	.word	7
	.word	String_dispTab
	.word	int_const32
	.ascii	"./lam-gc.cl"
	.byte	0	
	.align	2
	.word	-1
int_const32:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	11
	.word	-1
int_const31:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	47
	.word	-1
int_const30:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	45
	.word	-1
int_const29:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	27
	.word	-1
int_const28:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	39
	.word	-1
int_const27:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	35
	.word	-1
int_const26:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	14
	.word	-1
int_const25:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	5
	.word	-1
int_const24:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	23
	.word	-1
int_const23:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	48
	.word	-1
int_const22:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	31
	.word	-1
int_const21:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	36
	.word	-1
int_const20:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	18
	.word	-1
int_const19:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	37
	.word	-1
int_const18:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	30
	.word	-1
int_const17:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	56
	.word	-1
int_const16:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	61
	.word	-1
int_const15:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	20
	.word	-1
int_const14:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	46
	.word	-1
int_const13:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	50
	.word	-1
int_const12:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	24
	.word	-1
int_const11:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	2
	.word	-1
int_const10:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	7
	.word	-1
int_const9:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	9
	.word	-1
int_const8:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	10
	.word	-1
int_const7:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	12
	.word	-1
int_const6:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	13
	.word	-1
int_const5:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	8
	.word	-1
int_const4:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	6
	.word	-1
int_const3:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	3
	.word	-1
int_const2:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	4
	.word	-1
int_const1:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	0
	.word	-1
int_const0:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	1
	.word	-1
bool_const0:
	.word	3
	.word	4
	.word	Bool_dispTab
	.word	0
	.word	-1
bool_const1:
	.word	3
	.word	4
	.word	Bool_dispTab
	.word	1
class_nameTab:
				#Entered codeNameTab
	.word	str_const59
				#Leaving codeNameTab
				#Entered codeNameTab
	.word	str_const60
				#Leaving codeNameTab
				#Entered codeNameTab
	.word	str_const61
				#Leaving codeNameTab
				#Entered codeNameTab
	.word	str_const62
				#Leaving codeNameTab
				#Entered codeNameTab
	.word	str_const63
				#Leaving codeNameTab
				#Entered codeNameTab
	.word	str_const64
				#Leaving codeNameTab
				#Entered codeNameTab
	.word	str_const65
				#Leaving codeNameTab
				#Entered codeNameTab
	.word	str_const66
				#Leaving codeNameTab
				#Entered codeNameTab
	.word	str_const67
				#Leaving codeNameTab
				#Entered codeNameTab
	.word	str_const68
				#Leaving codeNameTab
				#Entered codeNameTab
	.word	str_const69
				#Leaving codeNameTab
				#Entered codeNameTab
	.word	str_const70
				#Leaving codeNameTab
				#Entered codeNameTab
	.word	str_const71
				#Leaving codeNameTab
				#Entered codeNameTab
	.word	str_const72
				#Leaving codeNameTab
				#Entered codeNameTab
	.word	str_const73
				#Leaving codeNameTab
				#Entered codeNameTab
	.word	str_const74
				#Leaving codeNameTab
class_objTab:
	.word	Object_protObj
	.word	Object_init
	.word	IO_protObj
	.word	IO_init
	.word	Int_protObj
	.word	Int_init
	.word	Bool_protObj
	.word	Bool_init
	.word	String_protObj
	.word	String_init
	.word	VarList_protObj
	.word	VarList_init
	.word	VarListNE_protObj
	.word	VarListNE_init
	.word	LambdaList_protObj
	.word	LambdaList_init
	.word	LambdaListNE_protObj
	.word	LambdaListNE_init
	.word	LambdaListRef_protObj
	.word	LambdaListRef_init
	.word	Expr_protObj
	.word	Expr_init
	.word	Variable_protObj
	.word	Variable_init
	.word	Lambda_protObj
	.word	Lambda_init
	.word	App_protObj
	.word	App_init
	.word	Term_protObj
	.word	Term_init
	.word	Main_protObj
	.word	Main_init
class_parentTab:
	.word	-2
	.word	0
	.word	0
	.word	0
	.word	0
	.word	1
	.word	5
	.word	0
	.word	7
	.word	0
	.word	1
	.word	10
	.word	10
	.word	10
	.word	1
	.word	14
class_attrTabTab:
	.word	Object_attrTab
	.word	IO_attrTab
	.word	Int_attrTab
	.word	Bool_attrTab
	.word	String_attrTab
	.word	VarList_attrTab
	.word	VarListNE_attrTab
	.word	LambdaList_attrTab
	.word	LambdaListNE_attrTab
	.word	LambdaListRef_attrTab
	.word	Expr_attrTab
	.word	Variable_attrTab
	.word	Lambda_attrTab
	.word	App_attrTab
	.word	Term_attrTab
	.word	Main_attrTab
Object_attrTab:
IO_attrTab:
Int_attrTab:
	.word	-2
Bool_attrTab:
	.word	-2
String_attrTab:
	.word	2
	.word	-2
VarList_attrTab:
VarListNE_attrTab:
	.word	11
	.word	5
LambdaList_attrTab:
LambdaListNE_attrTab:
	.word	12
	.word	2
	.word	5
	.word	7
LambdaListRef_attrTab:
	.word	2
	.word	7
Expr_attrTab:
Variable_attrTab:
	.word	4
Lambda_attrTab:
	.word	11
	.word	10
App_attrTab:
	.word	10
	.word	10
Term_attrTab:
Main_attrTab:
Object_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
IO_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	IO.out_string
	.word	IO.out_int
	.word	IO.in_string
	.word	IO.in_int
VarList_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	IO.out_string
	.word	IO.out_int
	.word	IO.in_string
	.word	IO.in_int
	.word	VarList.isNil
	.word	VarList.head
	.word	VarList.tail
	.word	VarList.add
	.word	VarList.print
VarListNE_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	IO.out_string
	.word	IO.out_int
	.word	IO.in_string
	.word	IO.in_int
	.word	VarListNE.isNil
	.word	VarListNE.head
	.word	VarListNE.tail
	.word	VarList.add
	.word	VarListNE.print
	.word	VarListNE.init
Expr_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	IO.out_string
	.word	IO.out_int
	.word	IO.in_string
	.word	IO.in_int
	.word	Expr.print_self
	.word	Expr.beta
	.word	Expr.substitute
	.word	Expr.gen_code
Variable_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	IO.out_string
	.word	IO.out_int
	.word	IO.in_string
	.word	IO.in_int
	.word	Variable.print_self
	.word	Variable.beta
	.word	Variable.substitute
	.word	Variable.gen_code
	.word	Variable.init
Lambda_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	IO.out_string
	.word	IO.out_int
	.word	IO.in_string
	.word	IO.in_int
	.word	Lambda.print_self
	.word	Lambda.beta
	.word	Lambda.substitute
	.word	Lambda.gen_code
	.word	Lambda.init
	.word	Lambda.apply
	.word	Lambda.gen_closure_code
App_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	IO.out_string
	.word	IO.out_int
	.word	IO.in_string
	.word	IO.in_int
	.word	App.print_self
	.word	App.beta
	.word	App.substitute
	.word	App.gen_code
	.word	App.init
Term_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	IO.out_string
	.word	IO.out_int
	.word	IO.in_string
	.word	IO.in_int
	.word	Term.var
	.word	Term.lam
	.word	Term.app
	.word	Term.i
	.word	Term.k
	.word	Term.s
Main_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	IO.out_string
	.word	IO.out_int
	.word	IO.in_string
	.word	IO.in_int
	.word	Term.var
	.word	Term.lam
	.word	Term.app
	.word	Term.i
	.word	Term.k
	.word	Term.s
	.word	Main.beta_reduce
	.word	Main.eval_class
	.word	Main.closure_class
	.word	Main.gen_code
	.word	Main.main
Int_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
Bool_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
String_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	String.length
	.word	String.concat
	.word	String.substr
LambdaList_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	LambdaList.isNil
	.word	LambdaList.headE
	.word	LambdaList.headC
	.word	LambdaList.headN
	.word	LambdaList.tail
	.word	LambdaList.add
LambdaListNE_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	LambdaListNE.isNil
	.word	LambdaListNE.headE
	.word	LambdaListNE.headC
	.word	LambdaListNE.headN
	.word	LambdaListNE.tail
	.word	LambdaList.add
	.word	LambdaListNE.init
LambdaListRef_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	LambdaListRef.isNil
	.word	LambdaListRef.headE
	.word	LambdaListRef.headC
	.word	LambdaListRef.headN
	.word	LambdaListRef.reset
	.word	LambdaListRef.add
	.word	LambdaListRef.removeHead
	.word	-1
				#Entered codeProtObj for Object
Object_protObj:
	.word	0
	.word	3
	.word	Object_dispTab
				#Leaving codeProtObj for Object
	.word	-1
				#Entered codeProtObj for IO
IO_protObj:
	.word	1
	.word	3
	.word	IO_dispTab
				#Leaving codeProtObj for IO
	.word	-1
				#Entered codeProtObj for VarList
VarList_protObj:
	.word	5
	.word	3
	.word	VarList_dispTab
				#Leaving codeProtObj for VarList
	.word	-1
				#Entered codeProtObj for VarListNE
VarListNE_protObj:
	.word	6
	.word	5
	.word	VarListNE_dispTab
	.word	0
	.word	0
				#Leaving codeProtObj for VarListNE
	.word	-1
				#Entered codeProtObj for Expr
Expr_protObj:
	.word	10
	.word	3
	.word	Expr_dispTab
				#Leaving codeProtObj for Expr
	.word	-1
				#Entered codeProtObj for Variable
Variable_protObj:
	.word	11
	.word	4
	.word	Variable_dispTab
	.word	str_const75
				#Leaving codeProtObj for Variable
	.word	-1
				#Entered codeProtObj for Lambda
Lambda_protObj:
	.word	12
	.word	5
	.word	Lambda_dispTab
	.word	0
	.word	0
				#Leaving codeProtObj for Lambda
	.word	-1
				#Entered codeProtObj for App
App_protObj:
	.word	13
	.word	5
	.word	App_dispTab
	.word	0
	.word	0
				#Leaving codeProtObj for App
	.word	-1
				#Entered codeProtObj for Term
Term_protObj:
	.word	14
	.word	3
	.word	Term_dispTab
				#Leaving codeProtObj for Term
	.word	-1
				#Entered codeProtObj for Main
Main_protObj:
	.word	15
	.word	3
	.word	Main_dispTab
				#Leaving codeProtObj for Main
	.word	-1
				#Entered codeProtObj for Int
Int_protObj:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	0
				#Leaving codeProtObj for Int
	.word	-1
				#Entered codeProtObj for Bool
Bool_protObj:
	.word	3
	.word	4
	.word	Bool_dispTab
	.word	0
				#Leaving codeProtObj for Bool
	.word	-1
				#Entered codeProtObj for String
String_protObj:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const1
	.word	0
				#Leaving codeProtObj for String
	.word	-1
				#Entered codeProtObj for LambdaList
LambdaList_protObj:
	.word	7
	.word	3
	.word	LambdaList_dispTab
				#Leaving codeProtObj for LambdaList
	.word	-1
				#Entered codeProtObj for LambdaListNE
LambdaListNE_protObj:
	.word	8
	.word	7
	.word	LambdaListNE_dispTab
	.word	0
	.word	int_const1
	.word	0
	.word	0
				#Leaving codeProtObj for LambdaListNE
	.word	-1
				#Entered codeProtObj for LambdaListRef
LambdaListRef_protObj:
	.word	9
	.word	5
	.word	LambdaListRef_dispTab
	.word	int_const1
	.word	0
				#Leaving codeProtObj for LambdaListRef
	.globl	heap_start
heap_start:
	.word	0
	.text
	.globl	Main_init
	.globl	Int_init
	.globl	String_init
	.globl	Bool_init
	.globl	Main.main
				#Entered codeObjInit for Object
Object_init:
				#Entered objectInitPrologue
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 16
	move	$s0 $a0
				#Leaving objectInitPrologue
	move	$a0 $s0
				#Entered objectInitEpilogue
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
				#Leaving objectInitEpilogue
				#Leaving codeObjInit for Object
				#Entered codeObjInit for IO
IO_init:
				#Entered objectInitPrologue
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 16
	move	$s0 $a0
				#Leaving objectInitPrologue
	jal	Object_init
	move	$a0 $s0
				#Entered objectInitEpilogue
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
				#Leaving objectInitEpilogue
				#Leaving codeObjInit for IO
				#Entered codeObjInit for Int
Int_init:
				#Entered objectInitPrologue
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 16
	move	$s0 $a0
				#Leaving objectInitPrologue
	jal	Object_init
	move	$a0 $s0
				#Entered objectInitEpilogue
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
				#Leaving objectInitEpilogue
				#Leaving codeObjInit for Int
				#Entered codeObjInit for Bool
Bool_init:
				#Entered objectInitPrologue
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 16
	move	$s0 $a0
				#Leaving objectInitPrologue
	jal	Object_init
	move	$a0 $s0
				#Entered objectInitEpilogue
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
				#Leaving objectInitEpilogue
				#Leaving codeObjInit for Bool
				#Entered codeObjInit for String
String_init:
				#Entered objectInitPrologue
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 16
	move	$s0 $a0
				#Leaving objectInitPrologue
	jal	Object_init
	move	$a0 $s0
				#Entered objectInitEpilogue
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
				#Leaving objectInitEpilogue
				#Leaving codeObjInit for String
				#Entered codeObjInit for VarList
VarList_init:
				#Entered objectInitPrologue
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 16
	move	$s0 $a0
				#Leaving objectInitPrologue
	jal	IO_init
	move	$a0 $s0
				#Entered objectInitEpilogue
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
				#Leaving objectInitEpilogue
				#Leaving codeObjInit for VarList
				#Entered codeObjInit for VarListNE
VarListNE_init:
				#Entered objectInitPrologue
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 16
	move	$s0 $a0
				#Leaving objectInitPrologue
	jal	VarList_init
				#Generating code for attribute x of type Variable in class VarListNE
				#Entered and exited cgen for no expression
	move	$a0 $zero
	sw	$a0 12($s0)
				# Done Generating code for attribute x of type Variable in class VarListNE
				#Generating code for attribute rest of type VarList in class VarListNE
				#Entered and exited cgen for no expression
	move	$a0 $zero
	sw	$a0 16($s0)
				# Done Generating code for attribute rest of type VarList in class VarListNE
	move	$a0 $s0
				#Entered objectInitEpilogue
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
				#Leaving objectInitEpilogue
				#Leaving codeObjInit for VarListNE
				#Entered codeObjInit for LambdaList
LambdaList_init:
				#Entered objectInitPrologue
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 16
	move	$s0 $a0
				#Leaving objectInitPrologue
	jal	Object_init
	move	$a0 $s0
				#Entered objectInitEpilogue
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
				#Leaving objectInitEpilogue
				#Leaving codeObjInit for LambdaList
				#Entered codeObjInit for LambdaListNE
LambdaListNE_init:
				#Entered objectInitPrologue
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 16
	move	$s0 $a0
				#Leaving objectInitPrologue
	jal	LambdaList_init
				#Generating code for attribute lam of type Lambda in class LambdaListNE
				#Entered and exited cgen for no expression
	move	$a0 $zero
	sw	$a0 12($s0)
				# Done Generating code for attribute lam of type Lambda in class LambdaListNE
				#Generating code for attribute num of type Int in class LambdaListNE
				#Entered and exited cgen for no expression
	move	$a0 $zero
	sw	$a0 16($s0)
				# Done Generating code for attribute num of type Int in class LambdaListNE
				#Generating code for attribute env of type VarList in class LambdaListNE
				#Entered and exited cgen for no expression
	move	$a0 $zero
	sw	$a0 20($s0)
				# Done Generating code for attribute env of type VarList in class LambdaListNE
				#Generating code for attribute rest of type LambdaList in class LambdaListNE
				#Entered and exited cgen for no expression
	move	$a0 $zero
	sw	$a0 24($s0)
				# Done Generating code for attribute rest of type LambdaList in class LambdaListNE
	move	$a0 $s0
				#Entered objectInitEpilogue
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
				#Leaving objectInitEpilogue
				#Leaving codeObjInit for LambdaListNE
				#Entered codeObjInit for LambdaListRef
LambdaListRef_init:
				#Entered objectInitPrologue
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 16
	move	$s0 $a0
				#Leaving objectInitPrologue
	jal	Object_init
				#Generating code for attribute nextNum of type Int in class LambdaListRef
				#Entered cgen for int const expression
	la	$a0 int_const1
				#Leaving cgen for int const expression
	sw	$a0 12($s0)
				# Done Generating code for attribute nextNum of type Int in class LambdaListRef
				#Generating code for attribute l of type LambdaList in class LambdaListRef
				#Entered and exited cgen for no expression
	move	$a0 $zero
	sw	$a0 16($s0)
				# Done Generating code for attribute l of type LambdaList in class LambdaListRef
	move	$a0 $s0
				#Entered objectInitEpilogue
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
				#Leaving objectInitEpilogue
				#Leaving codeObjInit for LambdaListRef
				#Entered codeObjInit for Expr
Expr_init:
				#Entered objectInitPrologue
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 16
	move	$s0 $a0
				#Leaving objectInitPrologue
	jal	IO_init
	move	$a0 $s0
				#Entered objectInitEpilogue
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
				#Leaving objectInitEpilogue
				#Leaving codeObjInit for Expr
				#Entered codeObjInit for Variable
Variable_init:
				#Entered objectInitPrologue
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 16
	move	$s0 $a0
				#Leaving objectInitPrologue
	jal	Expr_init
				#Generating code for attribute name of type String in class Variable
				#Entered and exited cgen for no expression
	move	$a0 $zero
	sw	$a0 12($s0)
				# Done Generating code for attribute name of type String in class Variable
	move	$a0 $s0
				#Entered objectInitEpilogue
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
				#Leaving objectInitEpilogue
				#Leaving codeObjInit for Variable
				#Entered codeObjInit for Lambda
Lambda_init:
				#Entered objectInitPrologue
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 16
	move	$s0 $a0
				#Leaving objectInitPrologue
	jal	Expr_init
				#Generating code for attribute arg of type Variable in class Lambda
				#Entered and exited cgen for no expression
	move	$a0 $zero
	sw	$a0 12($s0)
				# Done Generating code for attribute arg of type Variable in class Lambda
				#Generating code for attribute body of type Expr in class Lambda
				#Entered and exited cgen for no expression
	move	$a0 $zero
	sw	$a0 16($s0)
				# Done Generating code for attribute body of type Expr in class Lambda
	move	$a0 $s0
				#Entered objectInitEpilogue
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
				#Leaving objectInitEpilogue
				#Leaving codeObjInit for Lambda
				#Entered codeObjInit for App
App_init:
				#Entered objectInitPrologue
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 16
	move	$s0 $a0
				#Leaving objectInitPrologue
	jal	Expr_init
				#Generating code for attribute fun of type Expr in class App
				#Entered and exited cgen for no expression
	move	$a0 $zero
	sw	$a0 12($s0)
				# Done Generating code for attribute fun of type Expr in class App
				#Generating code for attribute arg of type Expr in class App
				#Entered and exited cgen for no expression
	move	$a0 $zero
	sw	$a0 16($s0)
				# Done Generating code for attribute arg of type Expr in class App
	move	$a0 $s0
				#Entered objectInitEpilogue
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
				#Leaving objectInitEpilogue
				#Leaving codeObjInit for App
				#Entered codeObjInit for Term
Term_init:
				#Entered objectInitPrologue
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 16
	move	$s0 $a0
				#Leaving objectInitPrologue
	jal	IO_init
	move	$a0 $s0
				#Entered objectInitEpilogue
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
				#Leaving objectInitEpilogue
				#Leaving codeObjInit for Term
				#Entered codeObjInit for Main
Main_init:
				#Entered objectInitPrologue
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 16
	move	$s0 $a0
				#Leaving objectInitPrologue
	jal	Term_init
	move	$a0 $s0
				#Entered objectInitEpilogue
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
				#Leaving objectInitEpilogue
				#Leaving codeObjInit for Main
				#Entered codeClassMethods for VarList
				#Generating code for method isNil in class VarList
VarList.isNil:
	addiu	$sp $sp -4
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method isNil with AR_size of 12
				#Entered cgen for bool const expression
	la	$a0 bool_const1
				#Leaving cgen for bool const expression
				#Done Generating inner code for method isNil with AR_size of 12
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	addiu	$sp $sp 4
	jr	$ra	
				#Generating code for method head in class VarList
VarList.head:
	addiu	$sp $sp -4
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method head with AR_size of 12
				#Entered cgen for block
				#BEGIN dispatch for method abort in class VarList
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
	bne	$a0 $zero label0
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label0:
	lw	$t1 8($a0)
	lw	$t1 0($t1)
	jalr	$t1
				#DONE dispatch for method abort in class VarList
				#Entered cgen for new
	la	$a0 Variable_protObj
	jal	Object.copy
	jal	Variable_init
				#Leaving cgen for new
				#Leaving cgen for block
				#Done Generating inner code for method head with AR_size of 12
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	addiu	$sp $sp 4
	jr	$ra	
				#Generating code for method tail in class VarList
VarList.tail:
	addiu	$sp $sp -4
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method tail with AR_size of 12
				#Entered cgen for block
				#BEGIN dispatch for method abort in class VarList
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
	bne	$a0 $zero label1
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label1:
	lw	$t1 8($a0)
	lw	$t1 0($t1)
	jalr	$t1
				#DONE dispatch for method abort in class VarList
				#Entered cgen for new
	la	$a0 VarList_protObj
	jal	Object.copy
	jal	VarList_init
				#Leaving cgen for new
				#Leaving cgen for block
				#Done Generating inner code for method tail with AR_size of 12
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	addiu	$sp $sp 4
	jr	$ra	
				#Generating code for method add in class VarList
VarList.add:
	addiu	$sp $sp -8
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method add with AR_size of 16
				#BEGIN dispatch for method init in class VarListNE
				#Evaluating and pushing argument of type Variable to current frame
				#Entered cgen for object: x
	lw	$a0 8($fp)
				#Exited cgen for object
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Done pushing argument of type Variable to current frame
				#Evaluating and pushing argument of type SELF_TYPE to current frame
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Done pushing argument of type SELF_TYPE to current frame
				#Entered cgen for new
	la	$a0 VarListNE_protObj
	jal	Object.copy
	jal	VarListNE_init
				#Leaving cgen for new
	bne	$a0 $zero label2
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label2:
	lw	$t1 8($a0)
	lw	$t1 48($t1)
	jalr	$t1
				#DONE dispatch for method init in class VarListNE
				#Done Generating inner code for method add with AR_size of 16
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 16
	addiu	$sp $sp 8
	jr	$ra	
				#Generating code for method print in class VarList
VarList.print:
	addiu	$sp $sp -4
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method print with AR_size of 12
				#BEGIN dispatch for method out_string in class VarList
				#Evaluating and pushing argument of type String to current frame
				#Entered cgen for string const expression
	la	$a0 str_const1
				#Leaving cgen for string const expression
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Done pushing argument of type String to current frame
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
	bne	$a0 $zero label3
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label3:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
				#DONE dispatch for method out_string in class VarList
				#Done Generating inner code for method print with AR_size of 12
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	addiu	$sp $sp 4
	jr	$ra	
				#Leaving codeClassMethods for VarList
				#Entered codeClassMethods for VarListNE
				#Generating code for method isNil in class VarListNE
VarListNE.isNil:
	addiu	$sp $sp -4
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method isNil with AR_size of 12
				#Entered cgen for bool const expression
	la	$a0 bool_const0
				#Leaving cgen for bool const expression
				#Done Generating inner code for method isNil with AR_size of 12
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	addiu	$sp $sp 4
	jr	$ra	
				#Generating code for method head in class VarListNE
VarListNE.head:
	addiu	$sp $sp -4
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method head with AR_size of 12
				#Entered cgen for object: x
	lw	$a0 12($s0)
				#Exited cgen for object
				#Done Generating inner code for method head with AR_size of 12
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	addiu	$sp $sp 4
	jr	$ra	
				#Generating code for method tail in class VarListNE
VarListNE.tail:
	addiu	$sp $sp -4
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method tail with AR_size of 12
				#Entered cgen for object: rest
	lw	$a0 16($s0)
				#Exited cgen for object
				#Done Generating inner code for method tail with AR_size of 12
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	addiu	$sp $sp 4
	jr	$ra	
				#Generating code for method init in class VarListNE
VarListNE.init:
	addiu	$sp $sp -12
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method init with AR_size of 20
				#Entered cgen for block
				#Entered cgen for assign
				#Entered cgen for object: y
	lw	$a0 8($fp)
				#Exited cgen for object
	sw	$a0 12($s0)
	addiu	$a1 $s0 1
	jal	_GenGC_Assign
				#Leaving cgen for assign
				#Entered cgen for assign
				#Entered cgen for object: r
	lw	$a0 12($fp)
				#Exited cgen for object
	sw	$a0 16($s0)
	addiu	$a1 $s0 2
	jal	_GenGC_Assign
				#Leaving cgen for assign
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
				#Leaving cgen for block
				#Done Generating inner code for method init with AR_size of 20
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 20
	addiu	$sp $sp 12
	jr	$ra	
				#Generating code for method print in class VarListNE
VarListNE.print:
	addiu	$sp $sp -4
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method print with AR_size of 12
				#Entered cgen for block
				#BEGIN dispatch for method print_self in class Variable
				#Entered cgen for object: x
	lw	$a0 12($s0)
				#Exited cgen for object
	bne	$a0 $zero label4
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label4:
	lw	$t1 8($a0)
	lw	$t1 28($t1)
	jalr	$t1
				#DONE dispatch for method print_self in class Variable
				#BEGIN dispatch for method out_string in class VarListNE
				#Evaluating and pushing argument of type String to current frame
				#Entered cgen for string const expression
	la	$a0 str_const2
				#Leaving cgen for string const expression
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Done pushing argument of type String to current frame
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
	bne	$a0 $zero label5
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label5:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
				#DONE dispatch for method out_string in class VarListNE
				#BEGIN dispatch for method print in class VarList
				#Entered cgen for object: rest
	lw	$a0 16($s0)
				#Exited cgen for object
	bne	$a0 $zero label6
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label6:
	lw	$t1 8($a0)
	lw	$t1 44($t1)
	jalr	$t1
				#DONE dispatch for method print in class VarList
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
				#Leaving cgen for block
				#Done Generating inner code for method print with AR_size of 12
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	addiu	$sp $sp 4
	jr	$ra	
				#Leaving codeClassMethods for VarListNE
				#Entered codeClassMethods for LambdaList
				#Generating code for method isNil in class LambdaList
LambdaList.isNil:
	addiu	$sp $sp -4
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method isNil with AR_size of 12
				#Entered cgen for bool const expression
	la	$a0 bool_const1
				#Leaving cgen for bool const expression
				#Done Generating inner code for method isNil with AR_size of 12
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	addiu	$sp $sp 4
	jr	$ra	
				#Generating code for method headE in class LambdaList
LambdaList.headE:
	addiu	$sp $sp -4
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method headE with AR_size of 12
				#Entered cgen for block
				#BEGIN dispatch for method abort in class LambdaList
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
	bne	$a0 $zero label7
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label7:
	lw	$t1 8($a0)
	lw	$t1 0($t1)
	jalr	$t1
				#DONE dispatch for method abort in class LambdaList
				#Entered cgen for new
	la	$a0 VarList_protObj
	jal	Object.copy
	jal	VarList_init
				#Leaving cgen for new
				#Leaving cgen for block
				#Done Generating inner code for method headE with AR_size of 12
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	addiu	$sp $sp 4
	jr	$ra	
				#Generating code for method headC in class LambdaList
LambdaList.headC:
	addiu	$sp $sp -4
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method headC with AR_size of 12
				#Entered cgen for block
				#BEGIN dispatch for method abort in class LambdaList
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
	bne	$a0 $zero label8
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label8:
	lw	$t1 8($a0)
	lw	$t1 0($t1)
	jalr	$t1
				#DONE dispatch for method abort in class LambdaList
				#Entered cgen for new
	la	$a0 Lambda_protObj
	jal	Object.copy
	jal	Lambda_init
				#Leaving cgen for new
				#Leaving cgen for block
				#Done Generating inner code for method headC with AR_size of 12
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	addiu	$sp $sp 4
	jr	$ra	
				#Generating code for method headN in class LambdaList
LambdaList.headN:
	addiu	$sp $sp -4
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method headN with AR_size of 12
				#Entered cgen for block
				#BEGIN dispatch for method abort in class LambdaList
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
	bne	$a0 $zero label9
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label9:
	lw	$t1 8($a0)
	lw	$t1 0($t1)
	jalr	$t1
				#DONE dispatch for method abort in class LambdaList
				#Entered cgen for int const expression
	la	$a0 int_const1
				#Leaving cgen for int const expression
				#Leaving cgen for block
				#Done Generating inner code for method headN with AR_size of 12
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	addiu	$sp $sp 4
	jr	$ra	
				#Generating code for method tail in class LambdaList
LambdaList.tail:
	addiu	$sp $sp -4
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method tail with AR_size of 12
				#Entered cgen for block
				#BEGIN dispatch for method abort in class LambdaList
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
	bne	$a0 $zero label10
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label10:
	lw	$t1 8($a0)
	lw	$t1 0($t1)
	jalr	$t1
				#DONE dispatch for method abort in class LambdaList
				#Entered cgen for new
	la	$a0 LambdaList_protObj
	jal	Object.copy
	jal	LambdaList_init
				#Leaving cgen for new
				#Leaving cgen for block
				#Done Generating inner code for method tail with AR_size of 12
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	addiu	$sp $sp 4
	jr	$ra	
				#Generating code for method add in class LambdaList
LambdaList.add:
	addiu	$sp $sp -16
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method add with AR_size of 24
				#BEGIN dispatch for method init in class LambdaListNE
				#Evaluating and pushing argument of type VarList to current frame
				#Entered cgen for object: e
	lw	$a0 8($fp)
				#Exited cgen for object
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Done pushing argument of type VarList to current frame
				#Evaluating and pushing argument of type Lambda to current frame
				#Entered cgen for object: x
	lw	$a0 12($fp)
				#Exited cgen for object
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Done pushing argument of type Lambda to current frame
				#Evaluating and pushing argument of type Int to current frame
				#Entered cgen for object: n
	lw	$a0 16($fp)
				#Exited cgen for object
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Done pushing argument of type Int to current frame
				#Evaluating and pushing argument of type SELF_TYPE to current frame
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Done pushing argument of type SELF_TYPE to current frame
				#Entered cgen for new
	la	$a0 LambdaListNE_protObj
	jal	Object.copy
	jal	LambdaListNE_init
				#Leaving cgen for new
	bne	$a0 $zero label11
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label11:
	lw	$t1 8($a0)
	lw	$t1 36($t1)
	jalr	$t1
				#DONE dispatch for method init in class LambdaListNE
				#Done Generating inner code for method add with AR_size of 24
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 24
	addiu	$sp $sp 16
	jr	$ra	
				#Leaving codeClassMethods for LambdaList
				#Entered codeClassMethods for LambdaListNE
				#Generating code for method isNil in class LambdaListNE
LambdaListNE.isNil:
	addiu	$sp $sp -4
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method isNil with AR_size of 12
				#Entered cgen for bool const expression
	la	$a0 bool_const0
				#Leaving cgen for bool const expression
				#Done Generating inner code for method isNil with AR_size of 12
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	addiu	$sp $sp 4
	jr	$ra	
				#Generating code for method headE in class LambdaListNE
LambdaListNE.headE:
	addiu	$sp $sp -4
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method headE with AR_size of 12
				#Entered cgen for object: env
	lw	$a0 20($s0)
				#Exited cgen for object
				#Done Generating inner code for method headE with AR_size of 12
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	addiu	$sp $sp 4
	jr	$ra	
				#Generating code for method headC in class LambdaListNE
LambdaListNE.headC:
	addiu	$sp $sp -4
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method headC with AR_size of 12
				#Entered cgen for object: lam
	lw	$a0 12($s0)
				#Exited cgen for object
				#Done Generating inner code for method headC with AR_size of 12
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	addiu	$sp $sp 4
	jr	$ra	
				#Generating code for method headN in class LambdaListNE
LambdaListNE.headN:
	addiu	$sp $sp -4
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method headN with AR_size of 12
				#Entered cgen for object: num
	lw	$a0 16($s0)
				#Exited cgen for object
				#Done Generating inner code for method headN with AR_size of 12
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	addiu	$sp $sp 4
	jr	$ra	
				#Generating code for method tail in class LambdaListNE
LambdaListNE.tail:
	addiu	$sp $sp -4
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method tail with AR_size of 12
				#Entered cgen for object: rest
	lw	$a0 24($s0)
				#Exited cgen for object
				#Done Generating inner code for method tail with AR_size of 12
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	addiu	$sp $sp 4
	jr	$ra	
				#Generating code for method init in class LambdaListNE
LambdaListNE.init:
	addiu	$sp $sp -20
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method init with AR_size of 28
				#Entered cgen for block
				#Entered cgen for assign
				#Entered cgen for object: e
	lw	$a0 8($fp)
				#Exited cgen for object
	sw	$a0 20($s0)
	addiu	$a1 $s0 3
	jal	_GenGC_Assign
				#Leaving cgen for assign
				#Entered cgen for assign
				#Entered cgen for object: l
	lw	$a0 12($fp)
				#Exited cgen for object
	sw	$a0 12($s0)
	addiu	$a1 $s0 1
	jal	_GenGC_Assign
				#Leaving cgen for assign
				#Entered cgen for assign
				#Entered cgen for object: n
	lw	$a0 16($fp)
				#Exited cgen for object
	sw	$a0 16($s0)
	addiu	$a1 $s0 2
	jal	_GenGC_Assign
				#Leaving cgen for assign
				#Entered cgen for assign
				#Entered cgen for object: r
	lw	$a0 20($fp)
				#Exited cgen for object
	sw	$a0 24($s0)
	addiu	$a1 $s0 4
	jal	_GenGC_Assign
				#Leaving cgen for assign
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
				#Leaving cgen for block
				#Done Generating inner code for method init with AR_size of 28
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 28
	addiu	$sp $sp 20
	jr	$ra	
				#Leaving codeClassMethods for LambdaListNE
				#Entered codeClassMethods for LambdaListRef
				#Generating code for method isNil in class LambdaListRef
LambdaListRef.isNil:
	addiu	$sp $sp -4
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method isNil with AR_size of 12
				#BEGIN dispatch for method isNil in class LambdaList
				#Entered cgen for object: l
	lw	$a0 16($s0)
				#Exited cgen for object
	bne	$a0 $zero label12
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label12:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
				#DONE dispatch for method isNil in class LambdaList
				#Done Generating inner code for method isNil with AR_size of 12
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	addiu	$sp $sp 4
	jr	$ra	
				#Generating code for method headE in class LambdaListRef
LambdaListRef.headE:
	addiu	$sp $sp -4
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method headE with AR_size of 12
				#BEGIN dispatch for method headE in class LambdaList
				#Entered cgen for object: l
	lw	$a0 16($s0)
				#Exited cgen for object
	bne	$a0 $zero label13
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label13:
	lw	$t1 8($a0)
	lw	$t1 16($t1)
	jalr	$t1
				#DONE dispatch for method headE in class LambdaList
				#Done Generating inner code for method headE with AR_size of 12
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	addiu	$sp $sp 4
	jr	$ra	
				#Generating code for method headC in class LambdaListRef
LambdaListRef.headC:
	addiu	$sp $sp -4
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method headC with AR_size of 12
				#BEGIN dispatch for method headC in class LambdaList
				#Entered cgen for object: l
	lw	$a0 16($s0)
				#Exited cgen for object
	bne	$a0 $zero label14
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label14:
	lw	$t1 8($a0)
	lw	$t1 20($t1)
	jalr	$t1
				#DONE dispatch for method headC in class LambdaList
				#Done Generating inner code for method headC with AR_size of 12
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	addiu	$sp $sp 4
	jr	$ra	
				#Generating code for method headN in class LambdaListRef
LambdaListRef.headN:
	addiu	$sp $sp -4
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method headN with AR_size of 12
				#BEGIN dispatch for method headN in class LambdaList
				#Entered cgen for object: l
	lw	$a0 16($s0)
				#Exited cgen for object
	bne	$a0 $zero label15
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label15:
	lw	$t1 8($a0)
	lw	$t1 24($t1)
	jalr	$t1
				#DONE dispatch for method headN in class LambdaList
				#Done Generating inner code for method headN with AR_size of 12
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	addiu	$sp $sp 4
	jr	$ra	
				#Generating code for method reset in class LambdaListRef
LambdaListRef.reset:
	addiu	$sp $sp -4
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method reset with AR_size of 12
				#Entered cgen for block
				#Entered cgen for assign
				#Entered cgen for int const expression
	la	$a0 int_const1
				#Leaving cgen for int const expression
	sw	$a0 12($s0)
	addiu	$a1 $s0 1
	jal	_GenGC_Assign
				#Leaving cgen for assign
				#Entered cgen for assign
				#Entered cgen for new
	la	$a0 LambdaList_protObj
	jal	Object.copy
	jal	LambdaList_init
				#Leaving cgen for new
	sw	$a0 16($s0)
	addiu	$a1 $s0 2
	jal	_GenGC_Assign
				#Leaving cgen for assign
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
				#Leaving cgen for block
				#Done Generating inner code for method reset with AR_size of 12
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	addiu	$sp $sp 4
	jr	$ra	
				#Generating code for method add in class LambdaListRef
LambdaListRef.add:
	addiu	$sp $sp -12
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method add with AR_size of 20
				#Entered cgen for block
				#Entered cgen for assign
				#BEGIN dispatch for method add in class LambdaList
				#Evaluating and pushing argument of type VarList to current frame
				#Entered cgen for object: env
	lw	$a0 8($fp)
				#Exited cgen for object
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Done pushing argument of type VarList to current frame
				#Evaluating and pushing argument of type Lambda to current frame
				#Entered cgen for object: c
	lw	$a0 12($fp)
				#Exited cgen for object
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Done pushing argument of type Lambda to current frame
				#Evaluating and pushing argument of type Int to current frame
				#Entered cgen for object: nextNum
	lw	$a0 12($s0)
				#Exited cgen for object
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Done pushing argument of type Int to current frame
				#Entered cgen for object: l
	lw	$a0 16($s0)
				#Exited cgen for object
	bne	$a0 $zero label16
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label16:
	lw	$t1 8($a0)
	lw	$t1 32($t1)
	jalr	$t1
				#DONE dispatch for method add in class LambdaList
	sw	$a0 16($s0)
	addiu	$a1 $s0 2
	jal	_GenGC_Assign
				#Leaving cgen for assign
				#Entered cgen for assign
				#Entered cgen for addition
				#Entered cgen for object: nextNum
	lw	$a0 12($s0)
				#Exited cgen for object
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Entered cgen for int const expression
	la	$a0 int_const0
				#Leaving cgen for int const expression
	jal	Object.copy
	lw	$t1 4($sp)
	lw	$t1 12($t1)
	lw	$t2 12($a0)
	add	$t1 $t1 $t2
	sw	$t1 12($a0)
	addiu	$sp $sp 4
				#Leaving cgen for addition
	sw	$a0 12($s0)
	addiu	$a1 $s0 1
	jal	_GenGC_Assign
				#Leaving cgen for assign
				#Entered cgen for subtract
				#Entered cgen for object: nextNum
	lw	$a0 12($s0)
				#Exited cgen for object
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Entered cgen for int const expression
	la	$a0 int_const0
				#Leaving cgen for int const expression
	jal	Object.copy
	lw	$t1 4($sp)
	lw	$t1 12($t1)
	lw	$t2 12($a0)
	sub	$t1 $t1 $t2
	sw	$t1 12($a0)
	addiu	$sp $sp 4
				#Leaving cgen for subtract
				#Leaving cgen for block
				#Done Generating inner code for method add with AR_size of 20
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 20
	addiu	$sp $sp 12
	jr	$ra	
				#Generating code for method removeHead in class LambdaListRef
LambdaListRef.removeHead:
	addiu	$sp $sp -4
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method removeHead with AR_size of 12
				#Entered cgen for block
				#Entered cgen for assign
				#BEGIN dispatch for method tail in class LambdaList
				#Entered cgen for object: l
	lw	$a0 16($s0)
				#Exited cgen for object
	bne	$a0 $zero label17
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label17:
	lw	$t1 8($a0)
	lw	$t1 28($t1)
	jalr	$t1
				#DONE dispatch for method tail in class LambdaList
	sw	$a0 16($s0)
	addiu	$a1 $s0 2
	jal	_GenGC_Assign
				#Leaving cgen for assign
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
				#Leaving cgen for block
				#Done Generating inner code for method removeHead with AR_size of 12
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	addiu	$sp $sp 4
	jr	$ra	
				#Leaving codeClassMethods for LambdaListRef
				#Entered codeClassMethods for Expr
				#Generating code for method print_self in class Expr
Expr.print_self:
	addiu	$sp $sp -4
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method print_self with AR_size of 12
				#Entered cgen for block
				#BEGIN dispatch for method out_string in class Expr
				#Evaluating and pushing argument of type String to current frame
				#Entered cgen for string const expression
	la	$a0 str_const3
				#Leaving cgen for string const expression
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Done pushing argument of type String to current frame
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
	bne	$a0 $zero label18
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label18:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
				#DONE dispatch for method out_string in class Expr
				#BEGIN dispatch for method abort in class Expr
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
	bne	$a0 $zero label19
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label19:
	lw	$t1 8($a0)
	lw	$t1 0($t1)
	jalr	$t1
				#DONE dispatch for method abort in class Expr
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
				#Leaving cgen for block
				#Done Generating inner code for method print_self with AR_size of 12
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	addiu	$sp $sp 4
	jr	$ra	
				#Generating code for method beta in class Expr
Expr.beta:
	addiu	$sp $sp -4
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method beta with AR_size of 12
				#Entered cgen for block
				#BEGIN dispatch for method out_string in class Expr
				#Evaluating and pushing argument of type String to current frame
				#Entered cgen for string const expression
	la	$a0 str_const4
				#Leaving cgen for string const expression
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Done pushing argument of type String to current frame
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
	bne	$a0 $zero label20
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label20:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
				#DONE dispatch for method out_string in class Expr
				#BEGIN dispatch for method abort in class Expr
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
	bne	$a0 $zero label21
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label21:
	lw	$t1 8($a0)
	lw	$t1 0($t1)
	jalr	$t1
				#DONE dispatch for method abort in class Expr
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
				#Leaving cgen for block
				#Done Generating inner code for method beta with AR_size of 12
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	addiu	$sp $sp 4
	jr	$ra	
				#Generating code for method substitute in class Expr
Expr.substitute:
	addiu	$sp $sp -12
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method substitute with AR_size of 20
				#Entered cgen for block
				#BEGIN dispatch for method out_string in class Expr
				#Evaluating and pushing argument of type String to current frame
				#Entered cgen for string const expression
	la	$a0 str_const5
				#Leaving cgen for string const expression
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Done pushing argument of type String to current frame
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
	bne	$a0 $zero label22
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label22:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
				#DONE dispatch for method out_string in class Expr
				#BEGIN dispatch for method abort in class Expr
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
	bne	$a0 $zero label23
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label23:
	lw	$t1 8($a0)
	lw	$t1 0($t1)
	jalr	$t1
				#DONE dispatch for method abort in class Expr
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
				#Leaving cgen for block
				#Done Generating inner code for method substitute with AR_size of 20
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 20
	addiu	$sp $sp 12
	jr	$ra	
				#Generating code for method gen_code in class Expr
Expr.gen_code:
	addiu	$sp $sp -12
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method gen_code with AR_size of 20
				#Entered cgen for block
				#BEGIN dispatch for method out_string in class Expr
				#Evaluating and pushing argument of type String to current frame
				#Entered cgen for string const expression
	la	$a0 str_const6
				#Leaving cgen for string const expression
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Done pushing argument of type String to current frame
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
	bne	$a0 $zero label24
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label24:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
				#DONE dispatch for method out_string in class Expr
				#BEGIN dispatch for method abort in class Expr
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
	bne	$a0 $zero label25
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label25:
	lw	$t1 8($a0)
	lw	$t1 0($t1)
	jalr	$t1
				#DONE dispatch for method abort in class Expr
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
				#Leaving cgen for block
				#Done Generating inner code for method gen_code with AR_size of 20
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 20
	addiu	$sp $sp 12
	jr	$ra	
				#Leaving codeClassMethods for Expr
				#Entered codeClassMethods for Variable
				#Generating code for method init in class Variable
Variable.init:
	addiu	$sp $sp -8
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method init with AR_size of 16
				#Entered cgen for block
				#Entered cgen for assign
				#Entered cgen for object: n
	lw	$a0 8($fp)
				#Exited cgen for object
	sw	$a0 12($s0)
	addiu	$a1 $s0 1
	jal	_GenGC_Assign
				#Leaving cgen for assign
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
				#Leaving cgen for block
				#Done Generating inner code for method init with AR_size of 16
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 16
	addiu	$sp $sp 8
	jr	$ra	
				#Generating code for method print_self in class Variable
Variable.print_self:
	addiu	$sp $sp -4
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method print_self with AR_size of 12
				#BEGIN dispatch for method out_string in class Variable
				#Evaluating and pushing argument of type String to current frame
				#Entered cgen for object: name
	lw	$a0 12($s0)
				#Exited cgen for object
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Done pushing argument of type String to current frame
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
	bne	$a0 $zero label26
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label26:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
				#DONE dispatch for method out_string in class Variable
				#Done Generating inner code for method print_self with AR_size of 12
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	addiu	$sp $sp 4
	jr	$ra	
				#Generating code for method beta in class Variable
Variable.beta:
	addiu	$sp $sp -4
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method beta with AR_size of 12
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
				#Done Generating inner code for method beta with AR_size of 12
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	addiu	$sp $sp 4
	jr	$ra	
				#Generating code for method substitute in class Variable
Variable.substitute:
	addiu	$sp $sp -12
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method substitute with AR_size of 20
				#Entered cgen for conditional
				#Entering cgen for equal to
				#Entered cgen for object: x
	lw	$a0 8($fp)
				#Exited cgen for object
	move	$t1 $a0
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
	move	$t2 $a0
	la	$a0 bool_const1
	la	$a1 bool_const0
	jal	equality_test
label30:
				#Leaving cgen for equal to
	la	$t1 bool_const1
	beq	$a0 $t1 label28
label27:
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
	b	label29
label28:
				#Entered cgen for object: e
	lw	$a0 12($fp)
				#Exited cgen for object
label29:
				#Leaving cgen for conditional
				#Done Generating inner code for method substitute with AR_size of 20
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 20
	addiu	$sp $sp 12
	jr	$ra	
				#Generating code for method gen_code in class Variable
Variable.gen_code:
	addiu	$sp $sp -12
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method gen_code with AR_size of 20
				#Done Generating inner code for method gen_code with AR_size of 20
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 20
	addiu	$sp $sp 12
	jr	$ra	
				#Leaving codeClassMethods for Variable
				#Entered codeClassMethods for Lambda
				#Generating code for method init in class Lambda
Lambda.init:
	addiu	$sp $sp -12
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method init with AR_size of 20
				#Entered cgen for block
				#Entered cgen for assign
				#Entered cgen for object: a
	lw	$a0 8($fp)
				#Exited cgen for object
	sw	$a0 12($s0)
	addiu	$a1 $s0 1
	jal	_GenGC_Assign
				#Leaving cgen for assign
				#Entered cgen for assign
				#Entered cgen for object: b
	lw	$a0 12($fp)
				#Exited cgen for object
	sw	$a0 16($s0)
	addiu	$a1 $s0 2
	jal	_GenGC_Assign
				#Leaving cgen for assign
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
				#Leaving cgen for block
				#Done Generating inner code for method init with AR_size of 20
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 20
	addiu	$sp $sp 12
	jr	$ra	
				#Generating code for method print_self in class Lambda
Lambda.print_self:
	addiu	$sp $sp -4
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method print_self with AR_size of 12
				#Entered cgen for block
				#BEGIN dispatch for method out_string in class Lambda
				#Evaluating and pushing argument of type String to current frame
				#Entered cgen for string const expression
	la	$a0 str_const10
				#Leaving cgen for string const expression
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Done pushing argument of type String to current frame
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
	bne	$a0 $zero label31
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label31:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
				#DONE dispatch for method out_string in class Lambda
				#BEGIN dispatch for method print_self in class Variable
				#Entered cgen for object: arg
	lw	$a0 12($s0)
				#Exited cgen for object
	bne	$a0 $zero label32
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label32:
	lw	$t1 8($a0)
	lw	$t1 28($t1)
	jalr	$t1
				#DONE dispatch for method print_self in class Variable
				#BEGIN dispatch for method out_string in class Lambda
				#Evaluating and pushing argument of type String to current frame
				#Entered cgen for string const expression
	la	$a0 str_const11
				#Leaving cgen for string const expression
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Done pushing argument of type String to current frame
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
	bne	$a0 $zero label33
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label33:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
				#DONE dispatch for method out_string in class Lambda
				#BEGIN dispatch for method print_self in class Expr
				#Entered cgen for object: body
	lw	$a0 16($s0)
				#Exited cgen for object
	bne	$a0 $zero label34
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label34:
	lw	$t1 8($a0)
	lw	$t1 28($t1)
	jalr	$t1
				#DONE dispatch for method print_self in class Expr
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
				#Leaving cgen for block
				#Done Generating inner code for method print_self with AR_size of 12
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	addiu	$sp $sp 4
	jr	$ra	
				#Generating code for method beta in class Lambda
Lambda.beta:
	addiu	$sp $sp -4
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method beta with AR_size of 12
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
				#Done Generating inner code for method beta with AR_size of 12
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	addiu	$sp $sp 4
	jr	$ra	
				#Generating code for method apply in class Lambda
Lambda.apply:
	addiu	$sp $sp -8
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method apply with AR_size of 16
				#BEGIN dispatch for method substitute in class Expr
				#Evaluating and pushing argument of type Variable to current frame
				#Entered cgen for object: arg
	lw	$a0 12($s0)
				#Exited cgen for object
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Done pushing argument of type Variable to current frame
				#Evaluating and pushing argument of type Expr to current frame
				#Entered cgen for object: actual
	lw	$a0 8($fp)
				#Exited cgen for object
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Done pushing argument of type Expr to current frame
				#Entered cgen for object: body
	lw	$a0 16($s0)
				#Exited cgen for object
	bne	$a0 $zero label35
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label35:
	lw	$t1 8($a0)
	lw	$t1 36($t1)
	jalr	$t1
				#DONE dispatch for method substitute in class Expr
				#Done Generating inner code for method apply with AR_size of 16
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 16
	addiu	$sp $sp 8
	jr	$ra	
				#Generating code for method substitute in class Lambda
Lambda.substitute:
	addiu	$sp $sp -12
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method substitute with AR_size of 20
				#Entered cgen for conditional
				#Entering cgen for equal to
				#Entered cgen for object: x
	lw	$a0 8($fp)
				#Exited cgen for object
	move	$t1 $a0
				#Entered cgen for object: arg
	lw	$a0 12($s0)
				#Exited cgen for object
	move	$t2 $a0
	la	$a0 bool_const1
	la	$a1 bool_const0
	jal	equality_test
label39:
				#Leaving cgen for equal to
	la	$t1 bool_const1
	beq	$a0 $t1 label37
label36:
	b	label38
label37:
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
label38:
				#Leaving cgen for conditional
				#Done Generating inner code for method substitute with AR_size of 20
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 20
	addiu	$sp $sp 12
	jr	$ra	
				#Generating code for method gen_code in class Lambda
Lambda.gen_code:
	addiu	$sp $sp -12
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method gen_code with AR_size of 20
				#Entered cgen for block
				#BEGIN dispatch for method out_string in class Lambda
				#Evaluating and pushing argument of type String to current frame
				#Entered cgen for string const expression
	la	$a0 str_const12
				#Leaving cgen for string const expression
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Done pushing argument of type String to current frame
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
	bne	$a0 $zero label40
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label40:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
				#DONE dispatch for method out_string in class Lambda
				#BEGIN dispatch for method out_int in class Lambda
				#Evaluating and pushing argument of type Int to current frame
				#BEGIN dispatch for method add in class LambdaListRef
				#Evaluating and pushing argument of type VarList to current frame
				#Entered cgen for object: env
	lw	$a0 8($fp)
				#Exited cgen for object
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Done pushing argument of type VarList to current frame
				#Evaluating and pushing argument of type SELF_TYPE to current frame
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Done pushing argument of type SELF_TYPE to current frame
				#Entered cgen for object: closures
	lw	$a0 12($fp)
				#Exited cgen for object
	bne	$a0 $zero label41
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label41:
	lw	$t1 8($a0)
	lw	$t1 32($t1)
	jalr	$t1
				#DONE dispatch for method add in class LambdaListRef
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Done pushing argument of type Int to current frame
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
	bne	$a0 $zero label42
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label42:
	lw	$t1 8($a0)
	lw	$t1 16($t1)
	jalr	$t1
				#DONE dispatch for method out_int in class Lambda
				#BEGIN dispatch for method out_string in class Lambda
				#Evaluating and pushing argument of type String to current frame
				#Entered cgen for string const expression
	la	$a0 str_const13
				#Leaving cgen for string const expression
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Done pushing argument of type String to current frame
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
	bne	$a0 $zero label43
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label43:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
				#DONE dispatch for method out_string in class Lambda
				#Entered cgen for conditional
				#BEGIN dispatch for method isNil in class VarList
				#Entered cgen for object: env
	lw	$a0 8($fp)
				#Exited cgen for object
	bne	$a0 $zero label47
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label47:
	lw	$t1 8($a0)
	lw	$t1 28($t1)
	jalr	$t1
				#DONE dispatch for method isNil in class VarList
	la	$t1 bool_const1
	beq	$a0 $t1 label45
label44:
				#BEGIN dispatch for method out_string in class Lambda
				#Evaluating and pushing argument of type String to current frame
				#Entered cgen for string const expression
	la	$a0 str_const15
				#Leaving cgen for string const expression
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Done pushing argument of type String to current frame
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
	bne	$a0 $zero label48
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label48:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
				#DONE dispatch for method out_string in class Lambda
	b	label46
label45:
				#BEGIN dispatch for method out_string in class Lambda
				#Evaluating and pushing argument of type String to current frame
				#Entered cgen for string const expression
	la	$a0 str_const14
				#Leaving cgen for string const expression
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Done pushing argument of type String to current frame
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
	bne	$a0 $zero label49
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label49:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
				#DONE dispatch for method out_string in class Lambda
label46:
				#Leaving cgen for conditional
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
				#Leaving cgen for block
				#Done Generating inner code for method gen_code with AR_size of 20
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 20
	addiu	$sp $sp 12
	jr	$ra	
				#Generating code for method gen_closure_code in class Lambda
Lambda.gen_closure_code:
	addiu	$sp $sp -16
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method gen_closure_code with AR_size of 24
				#Entered cgen for block
				#BEGIN dispatch for method out_string in class Lambda
				#Evaluating and pushing argument of type String to current frame
				#Entered cgen for string const expression
	la	$a0 str_const16
				#Leaving cgen for string const expression
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Done pushing argument of type String to current frame
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
	bne	$a0 $zero label50
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label50:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
				#DONE dispatch for method out_string in class Lambda
				#BEGIN dispatch for method out_int in class Lambda
				#Evaluating and pushing argument of type Int to current frame
				#Entered cgen for object: n
	lw	$a0 8($fp)
				#Exited cgen for object
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Done pushing argument of type Int to current frame
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
	bne	$a0 $zero label51
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label51:
	lw	$t1 8($a0)
	lw	$t1 16($t1)
	jalr	$t1
				#DONE dispatch for method out_int in class Lambda
				#BEGIN dispatch for method out_string in class Lambda
				#Evaluating and pushing argument of type String to current frame
				#Entered cgen for string const expression
	la	$a0 str_const17
				#Leaving cgen for string const expression
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Done pushing argument of type String to current frame
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
	bne	$a0 $zero label52
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label52:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
				#DONE dispatch for method out_string in class Lambda
				#BEGIN dispatch for method out_string in class Lambda
				#Evaluating and pushing argument of type String to current frame
				#Entered cgen for string const expression
	la	$a0 str_const18
				#Leaving cgen for string const expression
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Done pushing argument of type String to current frame
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
	bne	$a0 $zero label53
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label53:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
				#DONE dispatch for method out_string in class Lambda
				#BEGIN dispatch for method out_string in class Lambda
				#Evaluating and pushing argument of type String to current frame
				#Entered cgen for string const expression
	la	$a0 str_const19
				#Leaving cgen for string const expression
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Done pushing argument of type String to current frame
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
	bne	$a0 $zero label54
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label54:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
				#DONE dispatch for method out_string in class Lambda
				#BEGIN dispatch for method out_int in class Lambda
				#Evaluating and pushing argument of type Int to current frame
				#Entered cgen for object: n
	lw	$a0 8($fp)
				#Exited cgen for object
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Done pushing argument of type Int to current frame
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
	bne	$a0 $zero label55
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label55:
	lw	$t1 8($a0)
	lw	$t1 16($t1)
	jalr	$t1
				#DONE dispatch for method out_int in class Lambda
				#BEGIN dispatch for method out_string in class Lambda
				#Evaluating and pushing argument of type String to current frame
				#Entered cgen for string const expression
	la	$a0 str_const20
				#Leaving cgen for string const expression
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Done pushing argument of type String to current frame
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
	bne	$a0 $zero label56
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label56:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
				#DONE dispatch for method out_string in class Lambda
				#BEGIN dispatch for method out_string in class Lambda
				#Evaluating and pushing argument of type String to current frame
				#Entered cgen for string const expression
	la	$a0 str_const21
				#Leaving cgen for string const expression
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Done pushing argument of type String to current frame
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
	bne	$a0 $zero label57
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label57:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
				#DONE dispatch for method out_string in class Lambda
				#BEGIN dispatch for method gen_code in class Expr
				#Evaluating and pushing argument of type VarList to current frame
				#BEGIN dispatch for method add in class VarList
				#Evaluating and pushing argument of type Variable to current frame
				#Entered cgen for object: arg
	lw	$a0 12($s0)
				#Exited cgen for object
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Done pushing argument of type Variable to current frame
				#Entered cgen for object: env
	lw	$a0 12($fp)
				#Exited cgen for object
	bne	$a0 $zero label58
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label58:
	lw	$t1 8($a0)
	lw	$t1 40($t1)
	jalr	$t1
				#DONE dispatch for method add in class VarList
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Done pushing argument of type VarList to current frame
				#Evaluating and pushing argument of type LambdaListRef to current frame
				#Entered cgen for object: closures
	lw	$a0 16($fp)
				#Exited cgen for object
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Done pushing argument of type LambdaListRef to current frame
				#Entered cgen for object: body
	lw	$a0 16($s0)
				#Exited cgen for object
	bne	$a0 $zero label59
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label59:
	lw	$t1 8($a0)
	lw	$t1 40($t1)
	jalr	$t1
				#DONE dispatch for method gen_code in class Expr
				#BEGIN dispatch for method out_string in class Lambda
				#Evaluating and pushing argument of type String to current frame
				#Entered cgen for string const expression
	la	$a0 str_const22
				#Leaving cgen for string const expression
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Done pushing argument of type String to current frame
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
	bne	$a0 $zero label60
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label60:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
				#DONE dispatch for method out_string in class Lambda
				#BEGIN dispatch for method out_string in class Lambda
				#Evaluating and pushing argument of type String to current frame
				#Entered cgen for string const expression
	la	$a0 str_const23
				#Leaving cgen for string const expression
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Done pushing argument of type String to current frame
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
	bne	$a0 $zero label61
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label61:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
				#DONE dispatch for method out_string in class Lambda
				#Leaving cgen for block
				#Done Generating inner code for method gen_closure_code with AR_size of 24
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 24
	addiu	$sp $sp 16
	jr	$ra	
				#Leaving codeClassMethods for Lambda
				#Entered codeClassMethods for App
				#Generating code for method init in class App
App.init:
	addiu	$sp $sp -12
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method init with AR_size of 20
				#Entered cgen for block
				#Entered cgen for assign
				#Entered cgen for object: f
	lw	$a0 8($fp)
				#Exited cgen for object
	sw	$a0 12($s0)
	addiu	$a1 $s0 1
	jal	_GenGC_Assign
				#Leaving cgen for assign
				#Entered cgen for assign
				#Entered cgen for object: a
	lw	$a0 12($fp)
				#Exited cgen for object
	sw	$a0 16($s0)
	addiu	$a1 $s0 2
	jal	_GenGC_Assign
				#Leaving cgen for assign
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
				#Leaving cgen for block
				#Done Generating inner code for method init with AR_size of 20
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 20
	addiu	$sp $sp 12
	jr	$ra	
				#Generating code for method print_self in class App
App.print_self:
	addiu	$sp $sp -4
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method print_self with AR_size of 12
				#Entered cgen for block
				#BEGIN dispatch for method out_string in class App
				#Evaluating and pushing argument of type String to current frame
				#Entered cgen for string const expression
	la	$a0 str_const24
				#Leaving cgen for string const expression
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Done pushing argument of type String to current frame
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
	bne	$a0 $zero label62
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label62:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
				#DONE dispatch for method out_string in class App
				#BEGIN dispatch for method print_self in class Expr
				#Entered cgen for object: fun
	lw	$a0 12($s0)
				#Exited cgen for object
	bne	$a0 $zero label63
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label63:
	lw	$t1 8($a0)
	lw	$t1 28($t1)
	jalr	$t1
				#DONE dispatch for method print_self in class Expr
				#BEGIN dispatch for method out_string in class App
				#Evaluating and pushing argument of type String to current frame
				#Entered cgen for string const expression
	la	$a0 str_const25
				#Leaving cgen for string const expression
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Done pushing argument of type String to current frame
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
	bne	$a0 $zero label64
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label64:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
				#DONE dispatch for method out_string in class App
				#BEGIN dispatch for method print_self in class Expr
				#Entered cgen for object: arg
	lw	$a0 16($s0)
				#Exited cgen for object
	bne	$a0 $zero label65
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label65:
	lw	$t1 8($a0)
	lw	$t1 28($t1)
	jalr	$t1
				#DONE dispatch for method print_self in class Expr
				#BEGIN dispatch for method out_string in class App
				#Evaluating and pushing argument of type String to current frame
				#Entered cgen for string const expression
	la	$a0 str_const26
				#Leaving cgen for string const expression
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Done pushing argument of type String to current frame
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
	bne	$a0 $zero label66
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label66:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
				#DONE dispatch for method out_string in class App
				#Entered cgen for object: self
	move	$a0 $s0
				#Exited cgen for object
				#Leaving cgen for block
				#Done Generating inner code for method print_self with AR_size of 12
				#Incrementing Stack pointer and Restoring FP, SELF, and then jumping
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	addiu	$sp $sp 4
	jr	$ra	
				#Generating code for method beta in class App
App.beta:
	addiu	$sp $sp -4
	sw	$fp 0($sp)
	addiu	$sp $sp -4
	sw	$s0 0($sp)
	addiu	$sp $sp -4
	sw	$ra 0($sp)
	addiu	$sp $sp -4
	addiu	$fp $sp 16
	move	$s0 $a0
				#Generating inner code for method beta with AR_size of 12
				#Entering cgen for case
				#Entered cgen for object: fun
	lw	$a0 12($s0)
				#Exited cgen for object
	bne	$a0 $zero label67
	la	$a0 str_const0
	li	$t1 1
	jal	_case_abort2
label67:
	li	$t1 10
label68:
	beq	$t1 -2 label70
	li	$t2 12
	bne	$t1 $t2 label71
				#BEGIN dispatch for method apply in class Lambda
				#Evaluating and pushing argument of type Expr to current frame
				#Entered cgen for object: arg
	lw	$a0 16($s0)
				#Exited cgen for object
	sw	$a0 0($sp)
	addiu	$sp $sp -4
				#Done pushing argument of type Expr to current frame
				#Entered cgen for object: l
